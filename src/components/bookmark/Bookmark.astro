---
import { type CollectionEntry, render } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import { Icon } from "astro-icon/components";
import type { HTMLTag, Polymorphic } from "astro/types";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	bookmark: CollectionEntry<"bookmark">;
	isPreview?: boolean | undefined;
};

const { as: Tag = "div", bookmark, isPreview = false } = Astro.props;
const { Content } = await render(bookmark);
---

<article
	class:list={[isPreview && "inline-grid rounded-md bg-blue-50 px-4 py-3 dark:bg-[rgb(33,35,38)]"]}
	data-pagefind-body={isPreview ? false : true}
>
	<Tag class="title" class:list={{ "text-base": isPreview }}>
		<a class="cactus-link" href={bookmark.data.url}>
			{bookmark.data.title}
			<Icon aria-hidden="true" class="inline" focusable="false" name="mdi:external-link" />
		</a>
	</Tag>
	{
		!isPreview && (
			<div class="mb-2 flex flex-wrap items-center gap-2 text-sm">
				<FormattedDate
					dateTimeOptions={{
						hour: "2-digit",
						minute: "2-digit",
						year: "2-digit",
						month: "2-digit",
						day: "2-digit",
					}}
					date={bookmark.data.readDate}
				/>
			</div>
		)
	}
	{
		!isPreview && (
			<p class="mb-3 text-sm text-gray-600 dark:text-gray-400">{bookmark.data.excerpt}</p>
		)
	}
	<div
		class="prose prose-sm prose-cactus mt-4 max-w-none [&>p:last-of-type]:mb-0"
		class:list={{ "outline-2 outline-offset-2 outline-dotted": !isPreview }}
	>
		<blockquote>
			<Content />
		</blockquote>
	</div>
	<div>
		{
			isPreview ? (
				<Icon aria-hidden="true" class="inline" focusable="false" name="mdi:calendar" />
				<a class="cactus-link" href={`/bookmarks/${bookmark.id}/`}>
					<FormattedDate date={bookmark.data.readDate} />
				</a>
			) : (
				<></>
			)
		}
	</div>
</article>
